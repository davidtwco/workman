#! /usr/bin/env bash

# Exit the entire script when a command fails.
set -e
# Unset variables are an error only after the potential for no subcommand has
# passed.
set -u
# Pipelines fail if any command in them fail.
set -o pipefail
# Fail when a glob doesn't expand.
shopt -s failglob

# Colors
RESET="$(tput sgr0)"
RED="$(tput setaf 1)"
YELLOW="$(tput setaf 3)"
BLUE="$(tput setaf 4)"

# Load configuration options from bash script in current directory. Allow same directory to host
# multiple projects by specifying custom config files using environment variables.
WORKMAN_CONFIG_FILE="${WORKMAN_CONFIG_FILE:-.workman_config}"
if [ ! -f ./${WORKMAN_CONFIG_FILE} ]; then
    echo "${RED}Workman must be run in a directory with a ${WORKMAN_CONFIG_FILE} file!${RESET}" >&2
    echo "${RED}An example config file is shown below...${RESET}" >&2
    echo
    echo "# Directory where working directories are kept."
    echo "WORKDIR_PATH=\"workdirs\""
    echo "# Name of stamp file placed in active working directories."
    echo "ACTIVE_STAMP_NAME=\".workman_active_working_directory\""
    echo "# Name of stamp file placed in working directories that are updated but not assigned."
    echo "DO_NOT_ASSIGN_STAMP_NAME=\".workman_do_not_assign\""
    echo
    echo "# Name of project, used in working directory names."
    echo "PROJECT_NAME=\"rust\""
    echo "# Default branch to check out and update."
    echo "DEFAULT_BRANCH=\"master\""
    echo
    echo "# Name of upstream remote to create and update from."
    echo "UPSTREAM_NAME=\"upstream\""
    echo "# Url of upstream remote to create and update from."
    echo "UPSTREAM_URL=\"git@github.com:rust-lang/rust.git\""
    echo
    echo "# Name of origin remote to clone from."
    echo "ORIGIN_NAME=\"origin\""
    echo "# Url of origin remote to clone from."
    echo "ORIGIN_URL=\"git@github.com:davidtwco/rust.git\""
    echo
    echo "# Command to run after creating a new working directory."
    echo "NEW_COMMAND=\"ln -s ../../config.toml ./config.toml\""
    echo "# Command to run to clean a working directory."
    echo "CLEAN_COMMAND=\"python2 x.py clean -j8\""
    echo "# Command to run to build in a working directory."
    echo "BUILD_COMMAND=\"python2 x.py build -j8\""
    exit 1
fi
source ./${WORKMAN_CONFIG_FILE}

# Print out all the directories in the working directory path that start
# with the project name.
list() {
    # When invoked on the command line, we don't provide a separator and default to a space,
    # but we can provide a newline when calling this from other functions so that it can
    # be sorted easier.
    SEPERATOR="${1:- }"
    for D in ${WORKDIR_PATH}/${PROJECT_NAME}*; do
        if [ -d "${D}" ]; then
            printf "${D#${WORKDIR_PATH}/}$SEPERATOR"
        fi
    done
    echo
}

_update_working_directory() {
    echo "${YELLOW}::${RESET} Pulling from ${UPSTREAM_NAME}..."
    git pull "${UPSTREAM_NAME}" "${DEFAULT_BRANCH}"

    echo "${YELLOW}::${RESET} Pushing to ${ORIGIN_NAME}..."
    git push "${ORIGIN_NAME}" "${DEFAULT_BRANCH}"
}

_run_new() {
    if [ -z "${NEW_COMMAND-}" ]; then
        echo "${YELLOW}::${RESET} Running new working directory command \"${NEW_COMMAND}\"..."
        eval "$NEW_COMMAND"
    fi
}

_run_clean() {
    if [ -z "${CLEAN_COMMAND-}" ]; then
        echo "${YELLOW}::${RESET} Running clean command \"${CLEAN_COMMAND}\"..."
        eval "$CLEAN_COMMAND"
    fi
}

_run_build() {
    if [ -z "${BUILD_COMMAND-}" ]; then
        echo "${YELLOW}::${RESET} Running build command \"${BUILD_COMMAND}\"..."
        eval "$BUILD_COMMAND"
    fi
}


# Create a new working directory with the project name and the next sequential number, clone the
# repository, set up the remotes and run any user-specified setup commands.
new() {
    MAX="$(echo "$(list \\n)" | sort --version-sort | tail -n 1)"
    MAX_INDEX="${MAX#${PROJECT_NAME}}"
    NEXT_INDEX="$((MAX_INDEX + 1))"
    NEXT_WORKDIR_PATH="${WORKDIR_PATH}/${PROJECT_NAME}${NEXT_INDEX}"

    echo "${BLUE}::${RESET} Creating new working directory \"${NEXT_WORKDIR_PATH}\"..."

    echo "${YELLOW}::${RESET} Cloning ${PROJECT_NAME} from \"${ORIGIN_URL}\"..."
    git clone "${ORIGIN_URL}" "${NEXT_WORKDIR_PATH}"
    pushd "${NEXT_WORKDIR_PATH}"

    echo "${YELLOW}::${RESET} Adding ${UPSTREAM_NAME} remote at \"${UPSTREAM_URL}\"..."
    git remote add "${UPSTREAM_NAME}" "${UPSTREAM_URL}"

    echo "${YELLOW}::${RESET} Checking out ${DEFAULT_BRANCH}..."
    git checkout "${DEFAULT_BRANCH}"

    _update_working_directory

    _run_new

    _run_clean

    _run_build

    echo "${BLUE}::${RESET} Finished!"
    popd
}

_find_free_directory() {
    for D in ${WORKDIR_PATH}/${PROJECT_NAME}*; do
        if [ -f "${D}/${DO_NOT_ASSIGN_STAMP_NAME}" ]; then
            continue
        fi

        if [ ! -f "${D}/${ACTIVE_STAMP_NAME}" ]; then
            echo "${D}"
            break
        fi
    done
}

_find_assigned_for_task() {
    # Expect first paramter to be task name to search for.
    TASK="${1}"

    for D in ${WORKDIR_PATH}/${PROJECT_NAME}*; do
        if [ -f "${D}/${ACTIVE_STAMP_NAME}" ]; then
            if [ $(<"${D}/${ACTIVE_STAMP_NAME}") == "${TASK}" ]; then
                echo "${D}"
                break
            fi
        fi
    done
}

# Assign a working directory to a task.
assign() {
    # Check if we've been given the name of a task.
    TASK="${1-}"
    if [ -z "${TASK}" ]; then
        echo "${RED}No task name provided.${RESET}" >&2
        usage
        exit 1
    fi

    # Attach if the task is already assigned.
    ASSIGNED="$(_find_assigned_for_task ${TASK})"
    if [ ! -z $ASSIGNED ]; then
        echo "${BLUE}::${RESET} Found existing working directory for \"${TASK}\", attaching..."
        pushd "${FREE}"
        tmux new -A -s "${TASK}"
        popd
        exit 0
    fi

    # If we found none then exit.
    FREE="$(_find_free_directory)"
    if [ -z "${FREE}" ]; then
        echo "${RED}No free working directories available.${RESET}" >&2
        exit 1
    fi

    echo "${BLUE}::${RESET} Assigning working directory \"${FREE}\" to \"${TASK}\"..."
    pushd "${FREE}"

    echo "${YELLOW}::${RESET} Creating stamp file..."
    echo "${TASK}" > "${ACTIVE_STAMP_NAME}"

    echo "${YELLOW}::${RESET} Creating git branch..."
    git checkout -b "${TASK}"

    echo "${BLUE}::${RESET} Finished! Starting tmux session..."
    tmux new -s "${TASK}"
    popd
}

# Unassign a working directory from a task.
unassign() {
    # Check if we've been given the name of a task.
    TASK="${1-}"
    if [ -z "${TASK}" ]; then
        echo "${RED}No task name provided.${RESET}" >&2
        usage
        exit 1
    fi

    # Look for directories without stamp files and find the one with the matching task.
    ASSIGNED="$(_find_assigned_for_task ${TASK})"
    if [ -z "${ASSIGNED}" ]; then
        echo "${RED}No assigned working directory for \"${TASK}\" found!${RESET}"
        exit 1
    fi

    echo "${BLUE}::${RESET} Unassigning working directory \"${ASSIGNED}\" from \"${TASK}\"..."
    pushd "${ASSIGNED}"

    echo "${YELLOW}::${RESET} Removing stamp file..."
    rm "${ACTIVE_STAMP_NAME}"

    echo "${YELLOW}::${RESET} Checking out ${DEFAULT_BRANCH}..."
    git checkout "${DEFAULT_BRANCH}"

    echo "${YELLOW}::${RESET} Removing branch for \"${TASK}\"..."
    git branch -D "${TASK}"

    _update_working_directory

    _run_clean

    echo "${YELLOW}::${RESET} Killing tmux session..."
    popd
    if (tmux ls -F "#S" | grep "${TASK}"); then
        tmux kill-session -t "${TASK}"
    fi

    echo "${BLUE}::${RESET} Finished!"
}

# Update all unassigned working directories.
update() {
    echo "${BLUE}::${RESET} Updating unassigned working directories..."
    for D in ${WORKDIR_PATH}/${PROJECT_NAME}*; do
        if [ ! -f "${D}/${ACTIVE_STAMP_NAME}" ]; then
            echo "${YELLOW}::${RESET} Updating \"${D}\"..."
            pushd "${D}"

            echo "${YELLOW}::${RESET} Checking out ${DEFAULT_BRANCH}..."
            git checkout "${DEFAULT_BRANCH}"

            _update_working_directory

            _run_clean

            _run_build

            echo "${YELLOW}::${RESET} Finished updating \"${D}\"..."
            popd
        else
            echo "${YELLOW}::${RESET} Skipping assigned working directory \"${D}\"..."
        fi
    done
    echo "${BLUE}::${RESET} Finished!"
}

# Alias for `usage`.
help() {
    usage
}

# Print the usage information.
usage() {
    US="%4s%-10s\n"
    SB="%4s%-25s%-20s\n"
    echo "Workman 0.1.0"
    echo "David Wood <david@davidtw.co>"
    echo "Experimental working directory manager - handles creating new working directories, "
    echo "assigning and unassigning working directories to/from tasks and updating working"
    echo "directories"
    echo
    echo "USAGE:"
    printf "${US}" "" "${0} [SUBCOMMANDS]"
    echo
    echo "SUBCOMMANDS:"
    printf "${SB}" "" "help" "Prints this help message"
    printf "${SB}" "" "list" "List all working directories"
    printf "${SB}" "" "new" "Create a new working directory"
    printf "${SB}" "" "assign [TASK_NAME]" "Assign a working directory to a task"
    printf "${SB}" "" "unassign [TASK_NAME]" "Unassign a working directory from a task"
    printf "${SB}" "" "update" "Update all unassigned working directories"
}

# No subcommand has been provided.
if [ -z ${1-}  ]; then
    echo "${RED}Must provide a subcommand!${RESET}" >&2
    usage
# A correct subcommand has been provided.
elif [[ $1 =~ ^(help|list|new|assign|unassign|update)$ ]]; then
    "$@"
# A incorrect subcommand has been provided.
else
    echo "${RED}Invalid subcommand!${RESET}" >&2
    usage
    exit 1
fi
