#! /usr/bin/env bash

# Exit the entire script when a command fails.
set -e
# Unset variables are an error only after the potential for no subcommand has
# passed.
set -u
# Pipelines fail if any command in them fail.
set -o pipefail

# Colors
if [ -t 1 ]; then
    RESET="$(tput sgr0)"
    RED="$(tput setaf 1)"
    YELLOW="$(tput setaf 3)"
    BLUE="$(tput setaf 4)"
else
    RESET=""
    RED=""
    YELLOW=""
    BLUE=""
fi

# Name of stamp file placed in active working directories.
ACTIVE_STAMP_NAME=".workman_active_working_directory"
# Name of stamp file placed in working directories that are updated but not assigned.
DO_NOT_ASSIGN_STAMP_NAME=".workman_do_not_assign"
# Name of stamp file placed in working directories that need updated before being assigned again.
NEEDS_REFRESH_STAMP_NAME=".workman_needs_refresh"
# Index of the working directory used as the root working directory for git-worktree.
ROOT_WORKTREE_INDEX="0"

# Load configuration options from bash script in current directory. Allow same directory to host
# multiple projects by specifying custom config files using environment variables.
WORKMAN_CONFIG_FILE="${WORKMAN_CONFIG_FILE:-.workman_config}"
if [ ! -f ./${WORKMAN_CONFIG_FILE} ]; then
    echo "${RED}Workman must be run in a directory with a ${WORKMAN_CONFIG_FILE} file!${RESET}" >&2
    SCRIPT_PATH="$(cd "$(dirname "$0")" ; pwd -P)"
    WORKMAN_DEFAULT_CONFIG_EXAMPLE_PATH="${SCRIPT_PATH}/workman_default_config"
    if [ -f "${WORKMAN_DEFAULT_CONFIG_EXAMPLE_PATH}" ]; then
        echo "${RED}An example config file is shown below...${RESET}" >&2
        echo
        cat "${WORKMAN_DEFAULT_CONFIG_EXAMPLE_PATH}"
    fi
    exit 1
fi

# Load the configuration file.
_load_config() {
    # Set some defaults for the `PROJECT_NAME` and `TASK` if not already set (only on the first
    # call) so that the option defaults below have values.
    if [ -z "${PROJECT_NAME-}" ]; then
        PROJECT_NAME="unnamed"
    fi
    if [ -z "${TASK-}" ]; then
        TASK="unnamed"
    fi

    # Set some defaults for options that the user may not have in their config.
    USE_GIT_WORKTREE="NO"
    SESSION_REATTACH_COMMAND="tmux new -A -s \"${PROJECT_NAME}/${TASK}\""
    SESSION_ATTACH_COMMAND="${SESSION_REATTACH_COMMAND}"
    SESSION_KILL_COMMAND="tmux kill-session -t \"${PROJECT_NAME}/${TASK}\""
    SESSION_CHECK_COMMAND="tmux ls -F \"#S\" | grep \"${PROJECT_NAME}/${TASK}\""

    # Load the config file.
    source ${WORKMAN_CONFIG_FILE_PATH}

    # Update helper variables after loading.
    if [ "${USE_GIT_WORKTREE}" == "YES" ]; then
        IS_ROOT="root "
    else
        IS_ROOT=""
    fi
}

WORKMAN_CONFIG_FILE_PATH="${PWD}/${WORKMAN_CONFIG_FILE}"
_load_config

# Print out all the directories in the working directory path that start
# with the project name.
list() {
    # When invoked on the command line, we don't provide a separator and default to a space,
    # but we can provide a newline when calling this from other functions so that it can
    # be sorted easier.
    SEPERATOR="${1:- }"
    for D in ${WORKDIR_PATH}/${PROJECT_NAME}*; do
        WITHOUT_PATH="${D#${WORKDIR_PATH}/}"
        if [ -d "${D}" ] && [[ "${WITHOUT_PATH}" =~ ^${PROJECT_NAME}[0-9]+$ ]]; then
            printf "${WITHOUT_PATH}$SEPERATOR"
        fi
    done
    echo
}

# Print out all the tasks that exist.
tasks() {
    # When invoked on the command line, we don't provide a separator and default to a space,
    # but we can provide a newline when calling this from other functions so that it can
    # be sorted easier.
    SEPERATOR="${1:- }"
    for D in ${WORKDIR_PATH}/${PROJECT_NAME}*; do
        WITHOUT_PATH="${D#${WORKDIR_PATH}/}"
        if [ -d "${D}" ] && [[ "${WITHOUT_PATH}" =~ ^${PROJECT_NAME}[0-9]+$ ]]; then
            if [ -f "${D}/${ACTIVE_STAMP_NAME}" ]; then
                echo "$(<"${D}/${ACTIVE_STAMP_NAME}")${SEPERATOR}"
            fi
        fi
    done
    echo
}

_update_working_directory() {
    echo "${YELLOW}::${RESET} Pulling from ${UPSTREAM_NAME}..."
    git pull "${UPSTREAM_NAME}" "${DEFAULT_BRANCH}"

    echo "${YELLOW}::${RESET} Updating submodules..."
    git submodule update --init --recursive

    echo "${YELLOW}::${RESET} Pushing to ${ORIGIN_NAME}..."
    git push "${ORIGIN_NAME}" "${DEFAULT_BRANCH}"
}

_run_before() {
    if [ ! -z "${BEFORE_COMMAND-}" ]; then
        echo "${YELLOW}::${RESET} Running before working directory command \"${BEFORE_COMMAND}\"..."
        eval "$BEFORE_COMMAND"
    fi
}

_run_after() {
    if [ ! -z "${AFTER_COMMAND-}" ]; then
        echo "${YELLOW}::${RESET} Running after working directory command \"${AFTER_COMMAND}\"..."
        if which nix-shell>/dev/null 2>&1 && [ -f ./shell.nix ]; then
            nix-shell --run "$AFTER_COMMAND"
        else
            eval "$AFTER_COMMAND"
        fi
    fi
}

_run_clean() {
    if [ ! -z "${CLEAN_COMMAND-}" ]; then
        echo "${YELLOW}::${RESET} Running clean command \"${CLEAN_COMMAND}\"..."
        if which nix-shell>/dev/null 2>&1 && [ -f ./shell.nix ]; then
            nix-shell --run "$CLEAN_COMMAND"
        else
            eval "$CLEAN_COMMAND"
        fi
    fi
}

_run_build() {
    if [ ! -z "${BUILD_COMMAND-}" ]; then
        echo "${YELLOW}::${RESET} Running build command \"${BUILD_COMMAND}\"..."
        if which nix-shell>/dev/null 2>&1 && [ -f ./shell.nix ]; then
            nix-shell --run "$BUILD_COMMAND"
        else
            eval "$BUILD_COMMAND"
        fi
    fi
}

# Create a new working directory with the project name and the next sequential number, clone the
# repository, set up the remotes and run any user-specified setup commands.
new() {
    MAX="$(echo "$(list \\n)" | sort --version-sort | tail -n 1)"
    if [ -z "${MAX}" ]; then
        MAX_INDEX="-1"
    else
        MAX_INDEX="${MAX#${PROJECT_NAME}}"
    fi

    NEXT_INDEX="$((MAX_INDEX + 1))"
    NEXT_WORKDIR_PATH="${WORKDIR_PATH}/${PROJECT_NAME}${NEXT_INDEX}"

    # Mention that this is the root working directory if using git-worktree.
    echo "${BLUE}::${RESET} Creating new ${IS_ROOT}working directory \"${NEXT_WORKDIR_PATH}\"..."

    if [ ${USE_GIT_WORKTREE} != "YES" ] || [ ${NEXT_INDEX} == "${ROOT_WORKTREE_INDEX}" ]; then
        echo "${YELLOW}::${RESET} Cloning ${PROJECT_NAME} from \"${ORIGIN_URL}\"..."
        git clone "${ORIGIN_URL}" "${NEXT_WORKDIR_PATH}"

        pushd "${NEXT_WORKDIR_PATH}"
        echo "${YELLOW}::${RESET} Adding ${UPSTREAM_NAME} remote at \"${UPSTREAM_URL}\"..."
        git remote add "${UPSTREAM_NAME}" "${UPSTREAM_URL}"

        echo "${YELLOW}::${RESET} Checking out ${DEFAULT_BRANCH}..."
        git checkout "${DEFAULT_BRANCH}"
        popd
    else
        # Get the absolute path of the next working directory, since we'll need this to refer to it
        # once in the root working directory.
        ABSOLUTE_NEXT_WORKDIR_PATH="$(pwd)/${NEXT_WORKDIR_PATH}"
        ROOT_WORKDIR_PATH="${WORKDIR_PATH}/${PROJECT_NAME}${ROOT_WORKTREE_INDEX}"

        echo "${YELLOW}::${RESET} Linking working directory from \"${ROOT_WORKDIR_PATH}\"..."
        pushd "${ROOT_WORKDIR_PATH}"
        git worktree add --detach "${ABSOLUTE_NEXT_WORKDIR_PATH}"
        popd
    fi

    pushd "${NEXT_WORKDIR_PATH}"

    # Re-load configuration file so that any commands have `pwd` evaluated in the current working
    # directory.
    _load_config

    _update_working_directory

    _run_before

    if which direnv>/dev/null 2>&1; then
        if [ -f "./.envrc" ]; then
            echo "${YELLOW}::${RESET} Allowing direnv..."
            direnv allow
        fi
    fi

    _run_clean

    _run_build

    _run_after

    echo "${BLUE}::${RESET} Finished!"
    popd
}

_find_working_directory() {
    # Expect first parameter to be working directory to confirm exists.
    WORKDIR="${1}"

    for D in ${WORKDIR_PATH}/${PROJECT_NAME}*; do
        WITHOUT_PATH="${D#${WORKDIR_PATH}/}"
        if ! [[ "${WITHOUT_PATH}" =~ ^${PROJECT_NAME}[0-9]+$ ]]; then
            continue
        fi

        if [ ${WITHOUT_PATH} == "${WORKDIR}" ]; then
            echo "${D}"
            break
        fi
    done
}

_kill_session() {
    eval "${SESSION_CHECK_COMMAND}"
    if [ $? -eq 0 ]; then
        echo "${YELLOW}::${RESET} Killing session for \"${TASK}\"..."
        eval "${SESSION_KILL_COMMAND}"
    fi
}

# Delete the working directory provided by the user or the newest.
remove() {
    # Find the newest working directory.
    NEWEST_WORKDIR="$(echo "$(list \\n)" | sort --version-sort | tail -n 1)"
    if [ -z "${NEWEST_WORKDIR}" ]; then
        echo "${RED}No working directories exist.${RESET}" >&2
        exit 1
    fi

    # Use user argument or newest workdir.
    WORKDIR="${1:-${NEWEST_WORKDIR}}"

    # Confirm working directory exists (when user provides a directory name).
    TARGET_PATH="$(_find_working_directory ${WORKDIR})"
    if [ -z "${TARGET_PATH}" ]; then
        echo "${RED}Could not find \"${WORKDIR}\" in working directories:${RESET}" >&2
        list
        exit 1
    fi

    # Get the name of the assigned task if it exists.
    if [ -f "${TARGET_PATH}/${ACTIVE_STAMP_NAME}" ]; then
        TASK="$(<"${TARGET_PATH}/${ACTIVE_STAMP_NAME}")"
    fi

    ROOT_PATH="${WORKDIR_PATH}/${PROJECT_NAME}${ROOT_WORKTREE_INDEX}"
    NEWEST_PATH="${WORKDIR_PATH}/${NEWEST_WORKDIR}"
    ABSOLUTE_TARGET_PATH="$(realpath $TARGET_PATH)"
    # Don't let users delete the root working directory when they still have working directories
    # linked to it.
    if [ ${USE_GIT_WORKTREE} == "YES" ] && \
       [ "${TARGET_PATH}" == "${ROOT_PATH}" ] && \
       [ "${ROOT_PATH}" != "${NEWEST_PATH}" ]; then
        echo "${RED}Cannot delete root working directory when using git-worktree and other" \
             "working directories exist.${RESET}" >&2
        exit 1
    # `rm -rf` a working directory when not using git-worktree, or when it is the root directory
    # (having already checked above that this would be the only remaining directory).
    elif [ ${USE_GIT_WORKTREE} != "YES" ] || [ "${TARGET_PATH}" == "${ROOT_PATH}" ]; then
        # Mention that this is the root working directory if using git-worktree.
        echo "${YELLOW}::${RESET} Deleting ${IS_ROOT}working directory at \"${TARGET_PATH}\"..."
        rm -rf "${TARGET_PATH}"
    # `git worktree remove` linked directories.
    else
        pushd "${ROOT_PATH}"
        echo "${YELLOW}::${RESET} Unlinking working directory at \"${TARGET_PATH}\"..."
        git worktree remove --force "${ABSOLUTE_TARGET_PATH}"
        popd
    fi

    if [ ! -z ${TASK} ]; then
        # Reload config to re-define the `$SESSION_` variables in terms of the current task.
        _load_config
        _kill_session
    fi
}

_find_free_directory() {
    for D in ${WORKDIR_PATH}/${PROJECT_NAME}*; do
        WITHOUT_PATH="${D#${WORKDIR_PATH}/}"
        if ! [[ "${WITHOUT_PATH}" =~ ^${PROJECT_NAME}[0-9]+$ ]]; then
            continue
        fi

        if [ -f "${D}/${DO_NOT_ASSIGN_STAMP_NAME}" ]; then
            continue
        fi

        if [ -f "${D}/${NEEDS_REFRESH_STAMP_NAME}" ]; then
            continue
        fi

        if [ ! -f "${D}/${ACTIVE_STAMP_NAME}" ]; then
            echo "${D}"
            break
        fi
    done
}

_find_assigned_for_task() {
    # Expect first paramter to be task name to search for.
    TASK="${1}"

    for D in ${WORKDIR_PATH}/${PROJECT_NAME}*; do
        WITHOUT_PATH="${D#${WORKDIR_PATH}/}"
        if ! [[ "${WITHOUT_PATH}" =~ ^${PROJECT_NAME}[0-9]+$ ]]; then
            continue
        fi

        if [ -f "${D}/${ACTIVE_STAMP_NAME}" ]; then
            if [ $(<"${D}/${ACTIVE_STAMP_NAME}") == "${TASK}" ]; then
                echo "${D}"
                break
            fi
        fi
    done
}

# Open a task's working directory if there is already one
open() {
    # Check if we've been given the name of a task.
    TASK="${1-}"
    if [ -z "${TASK}" ]; then
        echo "${RED}No task name provided.${RESET}" >&2
        usage
        exit 1
    fi

    ASSIGNED="$(_find_assigned_for_task ${TASK})"
    if [ ! -z $ASSIGNED ]; then
        _open $TASK $ASSIGNED
    else
        echo "${RED}Could not find \"${TASK}\" in currently assigned tasks:${RESET}" >&2
        tasks
        exit 1
    fi
}

# A convenience helper for the `open` and the `assign` commands, since they both can attach to
# a pre-exising session.
_open() {
    # Expect first paramter to be task name that exists.
    TASK=$1
    # Expect second paramter to be working directory path.
    ASSIGNED=$2

    # Re-load configuration file so that any commands have variables evaluated with most recent
    # values.
    _load_config

    echo "${BLUE}::${RESET} Found existing working directory for \"${TASK}\", attaching..."
    pushd "${ASSIGNED}"
    eval "${SESSION_REATTACH_COMMAND}"
    popd
}

# Assign a working directory to a task.
assign() {
    # Check if we've been given the name of a task.
    TASK="${1-}"
    if [ -z "${TASK}" ]; then
        echo "${RED}No task name provided.${RESET}" >&2
        usage
        exit 1
    fi

    # Attach if the task is already assigned.
    ASSIGNED="$(_find_assigned_for_task ${TASK})"
    if [ ! -z $ASSIGNED ]; then
        _open "${TASK}" "${ASSIGNED}"
    fi

    # If we found none then exit.
    FREE="$(_find_free_directory)"
    if [ -z "${FREE}" ]; then
        echo "${RED}No free working directories available.${RESET}" >&2
        exit 1
    fi

    echo "${BLUE}::${RESET} Assigning working directory \"${FREE}\" to \"${TASK}\"..."
    pushd "${FREE}"

    echo "${YELLOW}::${RESET} Creating stamp file..."
    echo "${TASK}" > "${ACTIVE_STAMP_NAME}"

    echo "${YELLOW}::${RESET} Creating git branch..."
    git checkout -b "${TASK}"

    # Re-load configuration file so that any commands have variables evaluated with most recent
    # values.
    _load_config

    echo "${BLUE}::${RESET} Finished! Starting session..."
    eval "${SESSION_ATTACH_COMMAND}"
    popd
}

_checkout_default_branch() {
    # Check out the default branch, handling git-worktree directories as appropriate. Expect to
    # be provided current working directory path, incl. WORKDIR_PATH.
    WORKDIR="${1#${WORKDIR_PATH}/}"
    echo "${YELLOW}::${RESET} Checking out ${DEFAULT_BRANCH}..."
    if [ ${USE_GIT_WORKTREE} != "YES" ] || \
       [ "${WORKDIR}" == "${PROJECT_NAME}${ROOT_WORKTREE_INDEX}" ]; then
        git checkout "${DEFAULT_BRANCH}"
    else
        git checkout "heads/${DEFAULT_BRANCH}"
    fi
}

# Unassign a working directory from a task.
unassign() {
    # Check if we've been given the name of a task.
    TASK="${1-}"
    if [ -z "${TASK}" ]; then
        echo "${RED}No task name provided.${RESET}" >&2
        usage
        exit 1
    fi

    # Look for directories without stamp files and find the one with the matching task.
    ASSIGNED="$(_find_assigned_for_task ${TASK})"
    if [ -z "${ASSIGNED}" ]; then
        echo "${RED}Could not find \"${TASK}\" in currently assigned tasks:${RESET}" >&2
        tasks
        exit 1
    fi

    echo "${BLUE}::${RESET} Unassigning working directory \"${ASSIGNED}\" from \"${TASK}\"..."
    pushd "${ASSIGNED}"

    # Re-load configuration file so that any commands have `pwd` evaluated in the current working
    # directory.
    _load_config

    echo "${YELLOW}::${RESET} Removing stamp file..."
    rm "${ACTIVE_STAMP_NAME}"

    _checkout_default_branch "${ASSIGNED}"

    echo "${YELLOW}::${RESET} Removing branch for \"${TASK}\"..."
    git branch -D "${TASK}"

    _update_working_directory ${ASSIGNED}

    _run_clean

    echo "${YELLOW}::${RESET} Marking directory as needing refreshed..."
    echo "${TASK}" > "${NEEDS_REFRESH_STAMP_NAME}"
    popd

    _kill_session

    echo "${BLUE}::${RESET} Finished!"
}


# Update all unassigned working directories.
update() {
    echo "${BLUE}::${RESET} Updating unassigned working directories..."
    for D in ${WORKDIR_PATH}/${PROJECT_NAME}*; do
        if [ ! -f "${D}/${ACTIVE_STAMP_NAME}" ]; then
            echo "${YELLOW}::${RESET} Updating \"${D}\"..."
            pushd "${D}"

            # Re-load configuration file so that any commands have `pwd` evaluated in the current
            # working directory.
            _load_config

            _checkout_default_branch "${D}"

            _update_working_directory

            _run_clean

            _run_build

            echo "${YELLOW}::${RESET} Finished updating \"${D}\"..."
            popd

            if [ -f "${D}/${NEEDS_REFRESH_STAMP_NAME}" ]; then
                echo "${YELLOW}::${RESET} Removing \"needs refresh\" mark for \"${D}\"..."
                rm "${D}/${NEEDS_REFRESH_STAMP_NAME}"
            fi
        else
            echo "${YELLOW}::${RESET} Skipping assigned working directory \"${D}\"..."
        fi
    done
    echo "${BLUE}::${RESET} Finished!"
}

# Alias for `usage`.
help() {
    usage
}

# Print the usage information.
usage() {
    US="%4s%-10s\n"
    SB="%4s%-25s%-20s\n"
    echo "Workman 0.2.0"
    echo "Experimental working directory manager - handles creating new working directories, "
    echo "assigning and unassigning working directories to/from tasks and updating working"
    echo "directories"
    echo
    echo "USAGE:"
    printf "${US}" "" "${0} SUBCOMMAND"
    echo
    echo "AUTHOR:"
    printf "${US}" "" "David Wood <david@davidtw.co>"
    echo
    echo "CONTRIBUTORS:"
    printf "${US}" "" "Oliver Scherer <https://github.com/oli-obk>"
    echo
    echo "SUBCOMMANDS:"
    printf "${SB}" "" "help" "Prints this help message"
    printf "${SB}" "" "list" "List all working directories"
    printf "${SB}" "" "tasks" "List all assigned tasks"
    printf "${SB}" "" "new" "Create a new working directory"
    printf "${SB}" "" "remove [WORKDIR]" "Remove provided or most recent working directory"
    printf "${SB}" "" "open TASK" "Open an existing working directory for a task"
    printf "${SB}" "" "assign TASK" "Assign a working directory to a task"
    printf "${SB}" "" "unassign TASK" "Unassign a working directory from a task"
    printf "${SB}" "" "update" "Update all unassigned working directories"
}

# No subcommand has been provided.
if [ -z ${1-}  ]; then
    echo "${RED}Must provide a subcommand!${RESET}" >&2
    usage
# A correct subcommand has been provided.
elif [[ $1 =~ ^(help|list|tasks|new|remove|open|assign|unassign|update)$ ]]; then
    "$@"
# A incorrect subcommand has been provided.
else
    echo "${RED}Invalid subcommand!${RESET}" >&2
    usage
    exit 1
fi
